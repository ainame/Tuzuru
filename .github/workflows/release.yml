name: Release

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string

permissions:
  contents: write

env:
  PRODUCT_NAME: tuzuru

jobs:
  build-linux:
    name: Build Linux Binaries
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v5
    
    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
    
    - name: Install Swiftly for Linux
      run: |
        curl -O https://download.swift.org/swiftly/linux/swiftly-$(uname -m).tar.gz && \
        tar zxf swiftly-$(uname -m).tar.gz && \
        ./swiftly init --quiet-shell-followup && \
        . "${SWIFTLY_HOME_DIR:-$HOME/.local/share/swiftly}/env.sh" && \
        hash -r
        
        # Install Swift 6.1.2
        swiftly install 6.1.2
        swiftly use 6.1.2
    
    - name: Build Linux x86_64 binary
      run: |
        # Source Swiftly environment
        . "${SWIFTLY_HOME_DIR:-$HOME/.local/share/swiftly}/env.sh"
        
        # Create build directory
        mkdir -p build/linux/x86_64
        
        # Build for Linux x86_64 with static Swift stdlib
        swift build -c release --static-swift-stdlib
        cp .build/release/tuzuru build/linux/x86_64/${{ env.PRODUCT_NAME }}
        
        # Package Linux x86_64 binary
        cd build/linux
        tar -czf ${{ env.PRODUCT_NAME }}-${{ steps.version.outputs.version }}-linux-x86_64.tar.gz -C x86_64 ${{ env.PRODUCT_NAME }}
        
        # Generate checksum for Linux binary
        shasum -a 256 *.tar.gz > ${{ env.PRODUCT_NAME }}-${{ steps.version.outputs.version }}-linux-checksums.txt
    
    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-binaries
        path: build/linux/

  build-macos:
    name: Build macOS Binaries
    runs-on: macos-15
    needs: build-linux
    
    steps:
    - name: Checkout
      uses: actions/checkout@v5

    - name: Setup Xcode
      run: sudo xcode-select -s /Applications/Xcode_16.4.app/Contents/Developer

    - name: Get version
      id: version
      run: |
        echo "version=${{ needs.build-linux.outputs.version }}" >> $GITHUB_OUTPUT

    - name: Build macOS binaries
      run: |
        # Create build directory
        mkdir -p build/macos/universal
        
        # Build universal binary for macOS
        swift build -c release --arch arm64 --arch x86_64
        
        # Copy binary and bundle
        cp .build/apple/Products/Release/${{ env.PRODUCT_NAME }} build/macos/universal/${{ env.PRODUCT_NAME }}
        chmod +x build/macos/universal/${{ env.PRODUCT_NAME }}
        
        # Copy bundle files from universal build
        cp -r .build/apple/Products/Release/tuzuru_TuzuruLib.bundle build/macos/universal/
        
        # Package macOS binary
        cd build/macos
        tar -czf ${{ env.PRODUCT_NAME }}-${{ steps.version.outputs.version }}-macos-universal.tar.gz -C universal ${{ env.PRODUCT_NAME }} tuzuru_TuzuruLib.bundle
        
        # Generate checksums for macOS binary
        shasum -a 256 *.tar.gz > ${{ env.PRODUCT_NAME }}-${{ steps.version.outputs.version }}-macos-checksums.txt

    - name: Download Linux artifacts
      uses: actions/download-artifact@v5
      with:
        name: linux-binaries
        path: build/linux/

    - name: Test Binaries
      run: |
        # Test macOS binary
        build/macos/universal/${{ env.PRODUCT_NAME }} --version || echo "Version command not available"
        build/macos/universal/${{ env.PRODUCT_NAME }} --help
        
        # Test Linux binaries (basic file check)
        chmod +x build/linux/x86_64/${{ env.PRODUCT_NAME }}
        file build/linux/x86_64/${{ env.PRODUCT_NAME }}

    - name: Update Homebrew Formula
      run: |
        SHA=$(shasum -a 256 build/macos/${{ env.PRODUCT_NAME }}-${{ steps.version.outputs.version }}-macos-universal.tar.gz | cut -d ' ' -f 1)
        sed -i '' "s|url \".*\"|url \"https://github.com/ainame/Tuzuru/releases/download/${{ steps.version.outputs.version }}/${{ env.PRODUCT_NAME }}-${{ steps.version.outputs.version }}-macos-universal.tar.gz\"|" Formula/tuzuru.rb
        sed -i '' "s|sha256 \".*\"|sha256 \"$SHA\"|" Formula/tuzuru.rb

    - name: Commit Formula Update
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add Formula/tuzuru.rb
        git commit -m "chore: update Formula for ${{ steps.version.outputs.version }}" || echo "No changes to commit"
        git push origin HEAD:main || echo "Failed to push changes"

    - name: Create Release and Upload All Assets
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        # Determine if prerelease
        PRERELEASE_FLAG=""
        if [[ "${{ steps.version.outputs.version }}" == *"alpha"* ]] || [[ "${{ steps.version.outputs.version }}" == *"beta"* ]] || [[ "${{ steps.version.outputs.version }}" == *"rc"* ]]; then
          PRERELEASE_FLAG="--prerelease"
        fi

        # Create release with all assets (macOS + Linux)
        gh release create "${{ steps.version.outputs.version }}" \
          --title "Tuzuru ${{ steps.version.outputs.version }}" \
          --generate-notes \
          $PRERELEASE_FLAG \
          build/macos/universal/${{ env.PRODUCT_NAME }} \
          build/macos/${{ env.PRODUCT_NAME }}-${{ steps.version.outputs.version }}-macos-universal.tar.gz \
          build/macos/${{ env.PRODUCT_NAME }}-${{ steps.version.outputs.version }}-macos-checksums.txt \
          build/linux/${{ env.PRODUCT_NAME }}-${{ steps.version.outputs.version }}-linux-x86_64.tar.gz \
          build/linux/${{ env.PRODUCT_NAME }}-${{ steps.version.outputs.version }}-linux-checksums.txt
